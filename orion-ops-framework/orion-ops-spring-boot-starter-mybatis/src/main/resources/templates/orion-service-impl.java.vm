package ${package.ServiceImpl};

import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.orion.lang.define.wrapper.DataGrid;
import com.orion.lang.utils.Valid;
import com.orion.lang.utils.collect.Lists;
import com.orion.ops.framework.common.constant.ErrorCode;
import com.orion.ops.framework.common.constant.ErrorMessage;
import com.orion.ops.framework.mybatis.core.query.Conditions;
#foreach($pkg in ${customFilePackages})
import ${pkg}.*;
#end
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;

/**
 * $!{table.comment} 服务实现类
 *
 * @author ${author}
 * @version 1.0.0
 * @since ${date}
 */
@Slf4j
@Service
public class ${table.serviceImplName} implements ${table.serviceName} {

    @Resource
    private ${type}DAO ${typeLower}DAO;

    @Override
    public Long create${type}(${type}CreateRequest request) {
        // 转换
        ${type}DO record = ${type}Convert.MAPPER.to(request);
        record.setId(null);
        // 查询是否存在
        this.check${type}Present(record);
        // 插入
        int effect = ${typeLower}DAO.insert(record);
        log.info("${type}Service-add${type} effect: {}, domain: {}", effect, JSON.toJSONString(record));
        return record.getId();
    }

    @Override
    public Integer update${type}(${type}UpdateRequest request) {
        // 转换
        ${type}DO record = ${type}Convert.MAPPER.to(request);
        Valid.notNull(record.getId(), ErrorMessage.ID_MISSING);
        // 查询是否存在
        this.check${type}Present(record);
        // 更新
        int effect = ${typeLower}DAO.updateById(record);
        log.info("${type}Service-update${type} effect: {}, domain: {}", effect, JSON.toJSONString(record));
        return effect;
    }

    @Override
    public ${type}VO get${type}(Long id) {
        // 查询
        ${type}DO record = ${typeLower}DAO.selectById(id);
        if (record == null) {
            throw ErrorCode.DATA_ABESENT.exception();
        }
        // 转换
        return ${type}Convert.MAPPER.to(record);
    }

    @Override
    public List<${type}VO> get${type}List(List<Long> idList) {
        // 查询
        List<${type}DO> records = ${typeLower}DAO.selectBatchIds(idList);
        if (records.isEmpty()) {
            return Lists.empty();
        }
        // 转换
        return ${type}Convert.MAPPER.to(records);
    }

    @Override
    public DataGrid<${type}VO> get${type}Page(${type}QueryRequest request) {
        // 构造条件
        LambdaQueryWrapper<${type}DO> wrapper = Conditions.wrapper(${type}DO.class)
        #foreach($field in ${table.fields})
                .eq(${type}DO::get${field.capitalName}, request.get${field.capitalName}())#if(!$foreach.hasNext);#end
        #end
        // 查询
        return ${typeLower}DAO.of()
                .wrapper(wrapper)
                .page(request)
                .dataGrid(${type}Convert.MAPPER::to);
    }

    @Override
    public Integer delete${type}(Long id) {
        int effect = ${typeLower}DAO.deleteById(id);
        log.info("${type}Service-delete${type} id: {}, effect: {}", id, effect);
        return effect;
    }

    @Override
    public Integer batchDelete${type}(List<Long> idList) {
        int effect = ${typeLower}DAO.deleteBatchIds(idList);
        log.info("${type}Service-batchDelete${type} idList: {}, effect: {}", JSON.toJSONString(idList), effect);
        return effect;
    }

    /**
     * 检测对象是否存在
     *
     * @param domain domain
     */
    private void check${type}Present(${type}DO domain) {
        // 构造条件
        LambdaQueryWrapper<${type}DO> wrapper = Conditions.wrapper(${type}DO.class)
                // 更新时忽略当前记录
                .ne(${type}DO::getId, domain.getId())
                // 用其他字段做重复校验
                #foreach($field in ${table.fields})
                #if("$!field.propertyName" != "id")
                .eq(${type}DO::get${field.capitalName}, domain.get${field.capitalName}())#if(!$foreach.hasNext);#end
                #end
                #end
        // 检查是否存在
        boolean present = ${typeLower}DAO.of().wrapper(wrapper).present();
        if (present) {
            throw ErrorCode.DATA_PRESENT.exception();
        }
    }

}
