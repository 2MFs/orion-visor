<template>
  <card-list v-model:searchValue="formModel.searchValue"
             create-card-position="head"
             :card-height="172"
             :loading="loading"
             :fieldConfig="fieldConfig"
             :list="list"
             :pagination="pagination"
             :card-layout-cols="cardColLayout"
             :filter-count="filterCount"
             :add-permission="['${package.ModuleName}:${typeHyphen}:create']"
             @add="emits('openAdd')"
             @reset="reset"
             @search="fetchTableData"
             @page-change="fetchTableData">
    <!-- 拓展操作 -->
    <template #extra="{ record }">
      <a-space>
        <!-- 更多操作 -->
        <a-dropdown trigger="hover">
          <icon-more class="card-extra-icon" />
          <template #content>
            <!-- 修改 -->
            <a-doption v-permission="['${package.ModuleName}:${typeHyphen}:update']"
                       @click="emits('openUpdate', record)">
              <icon-edit />
              修改
            </a-doption>
            <!-- 删除 -->
            <a-doption v-permission="['${package.ModuleName}:${typeHyphen}:delete']"
                       class="span-red"
                       @click="deleteRow(record.id)">
              <icon-delete />
              删除
            </a-doption>
          </template>
        </a-dropdown>
      </a-space>
    </template>
    <!-- 过滤条件 -->
    <template #filterContent>
      <a-form :model="formModel"
              class="modal-form"
              size="small"
              ref="formRef"
              label-align="right"
              :style="{ width: '300px' }"
              :label-col-props="{ span: 6 }"
              :wrapper-col-props="{ span: 18 }">
        #foreach($field in ${table.fields})
        <!-- $field.comment -->
        <a-form-item field="${field.propertyName}" label="${field.comment}" label-col-flex="50px">
        #if(${vue.enums.containsKey(${field.propertyName})})
        <a-select v-model="formModel.${field.propertyName}"
                  :options="toOptions(${vue.enums.get(${field.propertyName}).className})"
                  placeholder="请选择${field.comment}"
                  allow-clear />
        #else
        #if("$field.propertyType" == "Integer" || "$field.propertyType" == "Long")
        <a-input-number v-model="formModel.${field.propertyName}"
                        placeholder="请输入${field.comment}"
                        allow-clear
                        hide-button />
        #elseif("$field.propertyType" == "Date")
        <a-date-picker v-model="formModel.${field.propertyName}"
                       style="width: 100%"
                       placeholder="请选择${field.comment}"
                       show-time
                       allow-clear />
        #else
        <a-input v-model="formModel.${field.propertyName}" placeholder="请输入${field.comment}" allow-clear />
        #end
        #end
      </a-form-item>
      #end
      </a-form>
    </template>
  </card-list>
</template>

<script lang="ts">
  export default {
    name: '${vue.module}-${vue.feature}-card-list'
  };
</script>

<script setup lang="ts">
  import { usePagination, useColLayout } from '@/types/card';
  import { computed, reactive, ref } from 'vue';
  import useLoading from '@/hooks/loading';
  import { dataColor, objectTruthKeyCount, resetObject } from '@/utils';
  import fieldConfig from '../types/card.fields';
  import { deleteHost, getHostPage, HostQueryRequest, HostQueryResponse } from '@/api/asset/host';
  import { Message } from '@arco-design/web-vue';
  import { tagColor } from '@/views/asset/host/types/const';
  import TagMultiSelector from '@/components/tag/tag-multi-selector.vue';
  import useCopy from '@/hooks/copy';

  const { copy } = useCopy();
  const { loading, setLoading } = useLoading();
  const cardColLayout = useColLayout();
  const pagination = usePagination();
  const list = ref<HostQueryResponse[]>([]);
  const emits = defineEmits(['openAdd', 'openUpdate', 'openUpdateConfig']);

  const formModel = reactive<HostQueryRequest>({
    searchValue: undefined,
    id: undefined,
    name: undefined,
    code: undefined,
    address: undefined,
    favorite: undefined,
    tags: undefined,
    extra: true
  });

  // 条件数量
  const filterCount = computed(() => {
    return objectTruthKeyCount(formModel, ['searchValue', 'extra']);
  });

  // 删除当前行
  const deleteRow = async (id: number) => {
    try {
      setLoading(true);
      // 调用删除接口
      await deleteHost(id);
      Message.success('删除成功');
      // 重新加载数据
      await fetchTableData();
    } catch (e) {
    } finally {
      setLoading(false);
    }
  };

  // 添加后回调
  const addedCallback = () => {
    fetchTableData();
  };

  // 更新后回调
  const updatedCallback = () => {
    fetchTableData();
  };

  defineExpose({
    addedCallback, updatedCallback
  });

  // 重置条件
  const reset = () => {
    resetObject(formModel, ['extra']);
    fetchTableData();
  };

  // 加载数据
  const doFetchTableData = async (request: HostQueryRequest) => {
    try {
      setLoading(true);
      const { data } = await getHostPage(request);
      list.value = data.rows;
      pagination.total = data.total;
      pagination.current = request.page;
      pagination.pageSize = request.limit;
    } catch (e) {
    } finally {
      setLoading(false);
    }
  };

  // 切换页码
  const fetchTableData = (page = 1, limit = pagination.pageSize, form = formModel) => {
    doFetchTableData({ page, limit, ...form });
  };
  fetchTableData();

</script>

<style scoped lang="less">
</style>
