<template>
  <!-- 搜索 -->
  <a-card class="general-card table-search-card">
    <a-query-header :model="formModel"
                    label-align="left"
                    @submit="fetchTableData"
                    @reset="fetchTableData">
      #foreach($field in ${table.fields})
      <!-- $field.comment -->
      <a-form-item field="${field.propertyName}" label="${field.comment}" label-col-flex="50px">
        #if(${vue.enums.containsKey(${field.propertyName})})
        <a-select v-model="formModel.${field.propertyName}"
                  :options="toOptions(${vue.enums.get(${field.propertyName}).className})"
                  placeholder="请选择${field.comment}"
                  allow-clear />
        #else
        #if("$field.propertyType" == "Integer" || "$field.propertyType" == "Long")
        <a-input-number v-model="formModel.${field.propertyName}"
                        placeholder="请输入${field.comment}"
                        allow-clear
                        hide-button />
        #elseif("$field.propertyType" == "Date")
        <a-date-picker v-model="formModel.${field.propertyName}"
                       style="width: 100%"
                       placeholder="请选择${field.comment}"
                       show-time
                       allow-clear />
        #else
        <a-input v-model="formModel.${field.propertyName}" placeholder="请输入${field.comment}" allow-clear />
        #end
        #end
      </a-form-item>
      #end
    </a-query-header>
  </a-card>
  <!-- 表格 -->
  <a-card class="general-card table-card">
    <template #title>
      <!-- 左侧标题 -->
      <div class="table-title">
        ${table.comment}列表
      </div>
      <!-- 右侧按钮 -->
      <div class="table-bar-handle">
        <a-space>
          <!-- 新增 -->
          <a-button type="primary"
                    v-permission="['${package.ModuleName}:${typeHyphen}:create']"
                    @click="emits('openAdd')">
            新增
            <template #icon>
              <icon-plus />
            </template>
          </a-button>
          #if($vue.enableRowSelection)
          <!-- 删除 -->
          <a-popconfirm position="br"
                        type="warning"
                        :content="`确认删除选中的${selectedKeys.length}条记录吗?`"
                        @ok="deleteSelectRows">
            <a-button v-permission="['${package.ModuleName}:${typeHyphen}:delete']"
                      type="secondary"
                      status="danger"
                      :disabled="selectedKeys.length === 0">
              删除
              <template #icon>
                <icon-delete />
              </template>
            </a-button>
          </a-popconfirm>
          #end
        </a-space>
      </div>
    </template>
    <!-- table -->
    <a-table row-key="id"
             class="table-wrapper-8"
             ref="tableRef"
             label-align="left"
             :loading="loading"
             :columns="columns"
             #if($vue.enableRowSelection)
             v-model:selected-keys="selectedKeys"
             :row-selection="rowSelection"
             #end
             :data="tableRenderData"
             :pagination="pagination"
             @page-change="(page) => fetchTableData(page, pagination.pageSize)"
             @page-size-change="(size) => fetchTableData(1, size)"
             :bordered="false">
      #foreach($field in ${table.fields})
      #if(${vue.enums.containsKey(${field.propertyName})})
      <!-- $field.comment -->
      <template #${field.propertyName}="{ record }">
        {{ getEnumValue(record.${field.propertyName}, ${vue.enums.get(${field.propertyName}).className}) }}
      </template>
      #end
      #end
      <!-- 操作 -->
      <template #handle="{ record }">
        <div class="table-handle-wrapper">
          <!-- 修改 -->
          <a-button type="text"
                    size="mini"
                    v-permission="['${package.ModuleName}:${typeHyphen}:update']"
                    @click="emits('openUpdate', record)">
            修改
          </a-button>
          <!-- 删除 -->
          <a-popconfirm content="确认删除这条记录吗?"
                        position="left"
                        type="warning"
                        @ok="deleteRow(record)">
            <a-button v-permission="['${package.ModuleName}:${typeHyphen}:delete']"
                      type="text"
                      size="mini"
                      status="danger">
              删除
            </a-button>
          </a-popconfirm>
        </div>
      </template>
    </a-table>
  </a-card>
</template>

<script lang="ts">
  export default {
    name: '${vue.module}-${vue.feature}-table'
  };
</script>

<script lang="ts" setup>
  import { reactive, ref } from 'vue';
  import { batchDelete${vue.featureEntity}, delete${vue.featureEntity}, get${vue.featureEntity}Page, ${vue.featureEntity}QueryRequest, ${vue.featureEntity}QueryResponse } from '@/api/${vue.module}/${vue.feature}';
  import { Message, PaginationProps } from '@arco-design/web-vue';
  import useLoading from '@/hooks/loading';
  import columns from '../types/table.columns';
  #if($vue.enableRowSelection)
  import { defaultPagination, defaultRowSelection } from '@/types/table';
  #else
  import { defaultPagination } from '@/types/table';
  #end
  import {} from '../types/const';
  #if($vue.enums.isEmpty())
  import {} from '../types/enum.types';
  #else
  import { #foreach($entry in ${vue.enums.entrySet()})${entry.value.className}#if($foreach.hasNext), #end#end } from '../types/enum.types';
  #end
  import { toOptions, getEnumValue } from '@/utils/enum';

  const tableRenderData = ref<${vue.featureEntity}QueryResponse[]>([]);
  const { loading, setLoading } = useLoading();
  const emits = defineEmits(['openAdd', 'openUpdate']);

  const pagination = reactive(defaultPagination()) as PaginationProps;
  #if($vue.enableRowSelection)
  const selectedKeys = ref<number[]>([]);
  const rowSelection = reactive(defaultRowSelection());
  #end

  const formModel = reactive<${vue.featureEntity}QueryRequest>({
    #foreach($field in ${table.fields})
    ${field.propertyName}: undefined,
    #end
  });

  #if($vue.enableRowSelection)
  // 删除选中行
  const deleteSelectRows = async () => {
    try {
      setLoading(true);
      // 调用删除接口
      await batchDelete${vue.featureEntity}(selectedKeys.value);
      Message.success(`成功删除${selectedKeys.value.length}条数据`);
      selectedKeys.value = [];
      // 重新加载数据
      await fetchTableData();
    } catch (e) {
    } finally {
      setLoading(false);
    }
  };

  #end
  // 删除当前行
  const deleteRow = async ({ id }: {
    id: number
  }) => {
    try {
      setLoading(true);
      // 调用删除接口
      await delete${vue.featureEntity}(id);
      Message.success('删除成功');
      // 重新加载数据
      await fetchTableData();
    } catch (e) {
    } finally {
      setLoading(false);
    }
  };

  // 添加后回调
  const addedCallback = () => {
    fetchTableData();
  };

  // 更新后回调
  const updatedCallback = () => {
    fetchTableData();
  };

  defineExpose({
    addedCallback, updatedCallback
  });

  // 加载数据
  const doFetchTableData = async (request: ${vue.featureEntity}QueryRequest) => {
    try {
      setLoading(true);
      const { data } = await get${vue.featureEntity}Page(request);
      tableRenderData.value = data.rows;
      pagination.total = data.total;
      pagination.current = request.page;
      pagination.pageSize = request.limit;
      #if($vue.enableRowSelection)
      selectedKeys.value = [];
      #end
    } catch (e) {
    } finally {
      setLoading(false);
    }
  };

  // 切换页码
  const fetchTableData = (page = 1, limit = pagination.pageSize, form = formModel) => {
    doFetchTableData({ page, limit, ...form });
  };
  fetchTableData();

</script>

<style lang="less" scoped>

</style>
