<template>
  <a-drawer :visible="visible"
            :title="title"
            :width="430"
            :mask-closable="false"
            :unmount-on-close="true"
            :ok-button-props="{ disabled: loading }"
            :cancel-button-props="{ disabled: loading }"
            :on-before-ok="handlerOk"
            @cancel="handleClose">
    <a-spin :loading="loading">
      <a-form :model="formModel"
              ref="formRef"
              label-align="right"
              :style="{ width: '380px' }"
              :label-col-props="{ span: 6 }"
              :wrapper-col-props="{ span: 18 }"
              :rules="formRules">
        #foreach($field in ${table.fields})
        #if("$field.propertyName" != "id")
        <!-- $field.comment -->
        <a-form-item field="${field.propertyName}" label="${field.comment}">
        #if("$field.propertyType" == "Integer" || "$field.propertyType" == "Long")
          <a-input-number v-model="formModel.${field.propertyName}"
                          placeholder="请输入${field.comment}"
                          hide-button />
        #elseif("$field.propertyType" == "Date")
          <a-date-picker v-model="formModel.${field.propertyName}"
                         style="width: 100%"
                         placeholder="请选择${field.comment}"
                         show-time />
        #else
          <a-input v-model="formModel.${field.propertyName}" placeholder="请输入${field.comment}" />
        #end
        </a-form-item>
        #end
        #end
      </a-form>
    </a-spin>
  </a-drawer>
</template>

<script lang="ts">
  export default {
    name: '${vue.module}-${vue.feature}-form-drawer'
  };
</script>

<script lang="ts" setup>
  import { ref } from 'vue';
  import useLoading from '@/hooks/loading';
  import useVisible from '@/hooks/visible';
  import formRules from '../types/form.rules';
  import { create${vue.featureEntity}, update${vue.featureEntity} } from '@/api/${vue.module}/${vue.feature}';
  import { Message } from '@arco-design/web-vue';
  import {} from '../types/enum.types';
  import {} from '../types/const';
  import { toOptions } from '@/utils/enum';

  const { visible, setVisible } = useVisible();
  const { loading, setLoading } = useLoading();

  const title = ref<string>();
  const isAddHandle = ref<boolean>(true);

  const defaultForm = (): ${vue.featureEntity}UpdateRequest => {
    return {
    #foreach($field in ${table.fields})
      ${field.propertyName}: undefined,
    #end
    };
  };

  const formRef = ref<any>();
  const formModel = ref<${vue.featureEntity}UpdateRequest>({});

  const emits = defineEmits(['added', 'updated']);

  // 打开新增
  const openAdd = () => {
    title.value = '添加${table.comment}';
    isAddHandle.value = true;
    renderForm({ ...defaultForm() });
    setVisible(true);
  };

  // 打开修改
  const openUpdate = (record: any) => {
    title.value = '修改${table.comment}';
    isAddHandle.value = false;
    renderForm({ ...defaultForm(), ...record });
    setVisible(true);
  };

  // 渲染表单
  const renderForm = (record: any) => {
    formModel.value = Object.assign({}, record);
  };

  defineExpose({ openAdd, openUpdate });

  // 确定
  const handlerOk = async () => {
    setLoading(true);
    try {
      // 验证参数
      const error = await formRef.value.validate();
      if (error) {
        return false;
      }
      if (isAddHandle.value) {
        // 新增
        await create${vue.featureEntity}(formModel.value);
        Message.success('创建成功');
        emits('added');
      } else {
        // 修改
        await update${vue.featureEntity}(formModel.value);
        Message.success('修改成功');
        emits('updated');
      }
      // 清空
      handlerClear();
    } catch (e) {
      return false;
    } finally {
      setLoading(false);
    }
  };

  // 关闭
  const handleClose = () => {
    handlerClear();
  };

  // 清空
  const handlerClear = () => {
    setLoading(false);
    setVisible(false);
  };

</script>

<style lang="less" scoped>

</style>
