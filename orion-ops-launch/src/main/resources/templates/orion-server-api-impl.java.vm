package ${package.ServiceImpl};

import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.orion.lang.utils.collect.Collections;
import com.orion.ops.framework.common.constant.ErrorMessage;
import com.orion.ops.framework.common.utils.Valid;
#foreach($pkg in ${customFilePackages})
import ${pkg}.*;
#end
import ${customApiInterfaceFilePackage}.${type}Api;
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;

/**
 * $!{table.comment} 对外服务实现类
 *
 * @author ${author}
 * @version ${since}
 * @since ${date}
 */
@Slf4j
@Service
public class ${type}ApiImpl implements ${type}Api {

    @Resource
    private ${type}Service ${type}Service;
    
    @Resource
    private ${type}DAO ${typeLower}DAO;

    @Override
    public Long create${type}(${type}CreateDTO dto) {
        log.info("${type}Api.create${type} request: {}", JSON.toJSONString(dto));
        Valid.valid(dto);
        // 转换
        ${type}CreateRequest request = ${type}ApiConvert.MAPPER.to(dto);
        // 创建
        return ${type}Service.create${type}(request);
    }

    @Override
    public Integer update${type}ById(${type}UpdateDTO dto) {
        log.info("${type}Api.update${type} request: {}", JSON.toJSONString(dto));
        Valid.valid(dto);
        // 转换
        ${type}UpdateRequest request = ${type}ApiConvert.MAPPER.to(dto);
        // 修改
        return ${type}Service.update${type}(request);
    }

    @Override
    public ${type}DTO get${type}ById(Long id) {
        log.info("${type}Api.get${type}ById id: {}", id);
        Valid.notNull(id, ErrorMessage.ID_MISSING);
        // 修改
        ${type}DO record = ${type}DAO.selectById(id);
        if (record == null) {
            return null;
        }
        // 转换
        return ${type}ApiConvert.MAPPER.to(record);
    }

    @Override
    public List<${type}DTO> get${type}ListById(Collection<Long> idList) {
        log.info("${type}Api.get${type}ListById idList: {}", idList);
        if (Collections.isEmpty(idList)) {
            return new ArrayList<>();
        }
        // 查询
        List<${type}DO> rows = ${type}DAO.selectBatchIds(idList);
        // 转换
        return ${type}ApiConvert.MAPPER.toDTO(rows);
    }

    @Override
    public List<${type}DTO> get${type}List(${type}QueryDTO dto) {
        log.info("${type}Api.get${type}List dto: {}", JSON.toJSONString(dto));
        Valid.valid(dto);
        // 转换条件
        ${type}DO domain = ${type}ApiConvert.MAPPER.to(dto);
        // 查询
        LambdaQueryWrapper<${type}DO> wrapper = ${type}DAO.queryCondition(domain);
        List<${type}DO> rows = ${type}DAO.selectList(wrapper);
        // 转换结果
        return ${type}ApiConvert.MAPPER.toDTO(rows);
    }

    @Override
    public Integer delete${type}ById(Long id) {
        log.info("${type}Api.delete${type}ById id: {}", id);
        Valid.notNull(id, ErrorMessage.ID_MISSING);
        // 删除
        return ${type}DAO.deleteById(id);
    }

    @Override
    public Integer batchDelete${type}ById(Collection<Long> idList) {
        log.info("${type}Api.batchDelete${type}ById idList: {}", idList);
        Valid.notEmpty(idList, ErrorMessage.ID_MISSING);
        // 删除
        return ${type}DAO.deleteBatchIds(idList);
    }

}
