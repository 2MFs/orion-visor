package ${package.ServiceImpl};

import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.orion.lang.utils.collect.Collections;
import com.orion.ops.framework.common.constant.ErrorMessage;
import com.orion.ops.framework.common.utils.Valid;
#foreach($pkg in ${customModuleFilePackages})
import ${pkg}.*;
#end
#foreach($pkg in ${customProviderFilePackages})
import ${pkg}.*;
#end
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * $!{table.comment} 对外服务实现类
 *
 * @author ${author}
 * @version ${since}
 * @since ${date}
 */
@Slf4j
@Service
public class ${type}ApiImpl implements ${type}Api {

    @Resource
    private ${type}Service ${typeLower}Service;

    @Resource
    private ${type}DAO ${typeLower}DAO;

    @Override
    public Long create${type}(${type}CreateDTO dto) {
        log.info("${type}Api.create${type} request: {}", JSON.toJSONString(dto));
        Valid.valid(dto);
        // 转换
        ${type}CreateRequest request = ${type}ProviderConvert.MAPPER.to(dto);
        // 创建
        return ${typeLower}Service.create${type}(request);
    }

    @Override
    public Integer update${type}ById(${type}UpdateDTO dto) {
        log.info("${type}Api.update${type}ById request: {}", JSON.toJSONString(dto));
        Valid.valid(dto);
        // 转换
        ${type}UpdateRequest request = ${type}ProviderConvert.MAPPER.to(dto);
        // 修改
        return ${typeLower}Service.update${type}ById(request);
    }

    @Override
    public ${type}DTO get${type}ById(Long id) {
        log.info("${type}Api.get${type}ById id: {}", id);
        Valid.notNull(id, ErrorMessage.ID_MISSING);
        // 修改
        ${type}DO record = ${typeLower}DAO.selectById(id);
        if (record == null) {
            return null;
        }
        // 转换
        return ${type}ProviderConvert.MAPPER.to(record);
    }

    @Override
    public List<${type}DTO> get${type}ByIdList(Collection<Long> idList) {
        log.info("${type}Api.get${type}ByIdList idList: {}", idList);
        if (Collections.isEmpty(idList)) {
            return new ArrayList<>();
        }
        // 查询
        List<${type}DO> rows = ${typeLower}DAO.selectBatchIds(idList);
        // 转换
        return ${type}ProviderConvert.MAPPER.toList(rows);
    }

    @Override
    public List<${type}DTO> get${type}List(${type}QueryDTO dto) {
        log.info("${type}Api.get${type}List dto: {}", JSON.toJSONString(dto));
        Valid.valid(dto);
        // 条件
        LambdaQueryWrapper<${type}DO> wrapper = this.buildQueryWrapper(dto);
        // 查询
        return ${typeLower}DAO.of()
                .wrapper(wrapper)
                .list(${type}ProviderConvert.MAPPER::to);
    }

    @Override
    public Long get${type}Count(${type}QueryDTO dto) {
        log.info("${type}Api.get${type}Count dto: {}", JSON.toJSONString(dto));
        Valid.valid(dto);
        // 条件
        LambdaQueryWrapper<${type}DO> wrapper = this.buildQueryWrapper(dto);
        // 查询
        return ${typeLower}DAO.selectCount(wrapper);
    }

    @Override
    public Integer delete${type}ById(Long id) {
        log.info("${type}Api.delete${type}ById id: {}", id);
        Valid.notNull(id, ErrorMessage.ID_MISSING);
        // 删除
        return ${typeLower}DAO.deleteById(id);
    }

    @Override
    public Integer batchDelete${type}ByIdList(Collection<Long> idList) {
        log.info("${type}Api.batchDelete${type}ByIdList idList: {}", idList);
        Valid.notEmpty(idList, ErrorMessage.ID_MISSING);
        // 删除
        return ${typeLower}DAO.deleteBatchIds(idList);
    }

    /**
     * 构建查询 wrapper
     *
     * @param dto dto
     * @return wrapper
     */
    private LambdaQueryWrapper<${type}DO> buildQueryWrapper(${type}QueryDTO dto) {
        return ${typeLower}DAO.wrapper()
        #foreach($field in ${table.fields})
                .eq(${type}DO::get${field.capitalName}, dto.get${field.capitalName}())#if(!$foreach.hasNext);#end
        #end
    }

}
