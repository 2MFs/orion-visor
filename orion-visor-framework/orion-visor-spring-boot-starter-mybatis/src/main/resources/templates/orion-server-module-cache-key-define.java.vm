/*
 * Copyright (c) 2023 - present Dromara, All rights reserved.
 *
 *   https://visor.dromara.org
 *   https://visor.dromara.org.cn
 *   https://visor.orionsec.cn
 *
 * Members:
 *   Jiahang Li - ljh1553488six@139.com - author
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${currentPackage};

import cn.orionsec.kit.lang.define.cache.key.CacheKeyBuilder;
import cn.orionsec.kit.lang.define.cache.key.CacheKeyDefine;
import cn.orionsec.kit.lang.define.cache.key.struct.RedisCacheStruct;
#foreach($pkg in ${customModuleFilePackages})
import ${pkg}.*;
#end

import java.util.concurrent.TimeUnit;

/**
 * $!{table.comment}缓存 key
 *
 * @author ${author}
 * @version ${version}
 * @since ${date}
 */
public interface ${type}CacheKeyDefine {

    CacheKeyDefine $typeConst = new CacheKeyBuilder()
            .key("$meta.cacheKey")
            .desc("$meta.cacheDesc")
            .type(${type}CacheDTO.class)
            .struct(RedisCacheStruct.HASH)
             #if($meta.cacheExpired)
            .timeout($meta.cacheExpireTime, TimeUnit.$meta.cacheExpireUnit.name())
             #end
            .build();

}
